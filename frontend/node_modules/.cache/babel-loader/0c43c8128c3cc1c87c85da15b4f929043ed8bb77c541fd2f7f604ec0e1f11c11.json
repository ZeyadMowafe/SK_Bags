{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8000/api';\n\n// Token management\nconst getToken = () => localStorage.getItem('authToken');\nconst setToken = token => localStorage.setItem('authToken', token);\nconst removeToken = () => localStorage.removeItem('authToken');\n\n// API request helper\nconst apiRequest = async (endpoint, options = {}) => {\n  const token = getToken();\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...(token && {\n        'Authorization': `Bearer ${token}`\n      }),\n      ...options.headers\n    },\n    ...options\n  };\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, config);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('API request failed:', error);\n    throw error;\n  }\n};\n\n// Product API\nconst getProducts = async () => {\n  return apiRequest('/products');\n};\nconst getProduct = async id => {\n  return apiRequest(`/products/${id}`);\n};\n\n// Order API\n// Order API with enhanced error handling\nconst createOrder = async orderData => {\n  try {\n    console.log('بدء إرسال الطلب:', orderData);\n\n    // التحقق من بيانات الطلب قبل الإرسال\n    if (!orderData.customer_info || !orderData.items || orderData.items.length === 0) {\n      throw new Error('بيانات الطلب غير مكتملة');\n    }\n    const response = await fetch(`${API_BASE_URL}/orders`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(orderData)\n    });\n    console.log('حالة الاستجابة:', response.status);\n\n    // معالجة الأخطاء حسب نوع الاستجابة\n    if (!response.ok) {\n      let errorMessage = 'حدث خطأ أثناء إرسال الطلب';\n      try {\n        const errorData = await response.json();\n        console.log('بيانات الخطأ:', errorData);\n        if (errorData.message) {\n          errorMessage = errorData.message;\n        } else if (errorData.detail) {\n          errorMessage = errorData.detail;\n        }\n      } catch (jsonError) {\n        console.log('فشل في قراءة بيانات الخطأ');\n      }\n\n      // رسائل خطأ حسب نوع المشكلة\n      if (response.status === 400) {\n        throw new Error(errorMessage || 'بيانات الطلب غير صحيحة');\n      } else if (response.status === 422) {\n        throw new Error(errorMessage || 'بيانات غير مقبولة من السيرفر');\n      } else if (response.status === 500) {\n        throw new Error('خطأ في السيرفر. حاول مرة أخرى لاحقاً');\n      } else if (response.status >= 500) {\n        throw new Error('مشكلة في السيرفر. حاول مرة أخرى');\n      } else {\n        throw new Error(errorMessage || `خطأ ${response.status}`);\n      }\n    }\n\n    // محاولة قراءة الاستجابة\n    let responseData;\n    try {\n      responseData = await response.json();\n      console.log('بيانات الاستجابة:', responseData);\n    } catch (jsonError) {\n      console.log('فشل في قراءة الاستجابة كـ JSON');\n      throw new Error('استجابة غير صالحة من السيرفر');\n    }\n\n    // التحقق من صحة الاستجابة\n    if (!responseData) {\n      throw new Error('لم يتم الحصول على بيانات من السيرفر');\n    }\n\n    // التحقق من علامة النجاح الصريحة\n    if (responseData.success === false) {\n      throw new Error(responseData.message || 'تم رفض الطلب من قبل السيرفر');\n    }\n\n    // التحقق من وجود ID الطلب (علامة على النجاح)\n    if (!responseData.id && responseData.success !== true) {\n      console.warn('تحذير: الاستجابة لا تحتوي على ID أو تأكيد صريح للنجاح');\n    }\n    console.log('تم إنشاء الطلب بنجاح:', responseData);\n    return responseData;\n  } catch (error) {\n    console.error('خطأ في createOrder:', error);\n\n    // معالجة أخطاء الشبكة\n    if (error.name === 'TypeError' && error.message.includes('fetch')) {\n      throw new Error('فشل الاتصال بالسيرفر - تحقق من الإنترنت');\n    }\n    if (error.message.includes('NetworkError') || error.message.includes('Failed to fetch')) {\n      throw new Error('مشكلة في الاتصال بالسيرفر');\n    }\n\n    // إذا كان الخطأ له رسالة واضحة، استخدمها\n    if (error.message) {\n      throw error;\n    }\n\n    // خطأ عام\n    throw new Error('حدث خطأ غير متوقع أثناء إرسال الطلب');\n  }\n};\nconst getOrders = async () => {\n  return apiRequest('/orders');\n};\n\n// الحل الشامل: تجربة مسارات متعددة\nconst updateOrderStatus = async (orderId, status) => {\n  console.log(`Updating order ${orderId} with status: ${status}`);\n  const payload = {\n    status: status\n  };\n  console.log('Payload:', JSON.stringify(payload));\n\n  // قائمة المسارات المحتملة حسب الأولوية\n  const endpoints = [`/admin/orders/${orderId}/status`,\n  // المسار الصحيح في الـ Backend\n  `/orders/${orderId}/status`,\n  // المسار المستخدم في الـ Frontend سابقاً\n  `/admin/orders/${orderId}`,\n  // بديل محتمل\n  `/orders/${orderId}` // بديل محتمل\n  ];\n\n  // تجربة كل مسار حتى ينجح واحد\n  for (const endpoint of endpoints) {\n    try {\n      console.log(`Trying endpoint: ${endpoint}`);\n      const response = await apiRequest(endpoint, {\n        method: 'PUT',\n        body: JSON.stringify(payload)\n      });\n      console.log(`Success with endpoint: ${endpoint}`, response);\n      return response;\n    } catch (error) {\n      console.log(`Failed with endpoint ${endpoint}:`, error.message);\n\n      // إذا كان هذا آخر محاولة، ارمي الخطأ\n      if (endpoint === endpoints[endpoints.length - 1]) {\n        throw new Error(`All update attempts failed. Last error: ${error.message}`);\n      }\n    }\n  }\n};\n\n// الحل الثاني: استخدام PATCH بدلاً من PUT\nconst updateOrderStatusPatch = async (orderId, status) => {\n  return apiRequest(`/orders/${orderId}`, {\n    method: 'PATCH',\n    body: JSON.stringify({\n      status\n    })\n  });\n};\n\n// Auth API\nconst login = async credentials => {\n  // Create FormData to match OAuth2PasswordRequestForm expected by FastAPI\n  const formData = new URLSearchParams();\n  formData.append('username', credentials.email); // FastAPI OAuth2 expects 'username'\n  formData.append('password', credentials.password);\n  const response = await fetch(`${API_BASE_URL}/auth/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body: formData\n  });\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n  const data = await response.json();\n  if (data.access_token) {\n    setToken(data.access_token);\n  }\n  return data;\n};\nconst logout = () => {\n  removeToken();\n};\n\n// Admin API - Updated for images field only\nconst createProduct = async productData => {\n  // Clean data - use only images field\n  const preparedData = {\n    name: productData.name,\n    description: productData.description,\n    price: parseFloat(productData.price),\n    category: productData.category,\n    stock_quantity: parseInt(productData.stock_quantity),\n    images: Array.isArray(productData.images) ? productData.images : []\n  };\n  console.log('Sending product data:', preparedData);\n  return apiRequest('/admin/products', {\n    method: 'POST',\n    body: JSON.stringify(preparedData)\n  });\n};\nconst updateProduct = async (id, productData) => {\n  // Clean data - use only images field\n  const preparedData = {\n    name: productData.name,\n    description: productData.description,\n    price: parseFloat(productData.price),\n    category: productData.category,\n    stock_quantity: parseInt(productData.stock_quantity),\n    images: Array.isArray(productData.images) ? productData.images : []\n  };\n  return apiRequest(`/admin/products/${id}`, {\n    method: 'PUT',\n    body: JSON.stringify(preparedData)\n  });\n};\nconst deleteProduct = async id => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/admin/products/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${getToken()}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      var _errorData$message;\n      const errorData = await response.json();\n\n      // إذا كان الخطأ بسبب قيود المفتاح الخارجي\n      if (errorData.code === '23503' || (_errorData$message = errorData.message) !== null && _errorData$message !== void 0 && _errorData$message.includes('foreign key constraint')) {\n        throw new Error('Cannot delete product. It is associated with existing orders.');\n      }\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error deleting product:', error);\n    throw error;\n  }\n};\nconst uploadFile = async file => {\n  const formData = new FormData();\n  formData.append('file', file);\n  const token = getToken();\n  const response = await fetch(`${API_BASE_URL}/upload-simple`, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    body: formData\n  });\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n  const data = await response.json();\n  // Prefer absolute url if provided, else fallback to relative\n  if (data && data.url && !data.url.startsWith('http')) {\n    data.url = `http://localhost:8000${data.url}`;\n  }\n  return data;\n};\n\n// Export API service\nexport const apiService = {\n  // Products\n  getProducts,\n  getProduct,\n  // Orders\n  createOrder,\n  getOrders,\n  updateOrderStatus,\n  updateOrderStatusPatch,\n  // بديل للتجربة\n\n  // Auth\n  login,\n  logout,\n  // Admin\n  createProduct,\n  updateProduct,\n  deleteProduct,\n  uploadFile,\n  // Utils\n  getToken,\n  setToken,\n  removeToken\n};","map":{"version":3,"names":["API_BASE_URL","getToken","localStorage","getItem","setToken","token","setItem","removeToken","removeItem","apiRequest","endpoint","options","config","headers","response","fetch","ok","Error","status","json","error","console","getProducts","getProduct","id","createOrder","orderData","log","customer_info","items","length","method","body","JSON","stringify","errorMessage","errorData","message","detail","jsonError","responseData","success","warn","name","includes","getOrders","updateOrderStatus","orderId","payload","endpoints","updateOrderStatusPatch","login","credentials","formData","URLSearchParams","append","email","password","data","access_token","logout","createProduct","productData","preparedData","description","price","parseFloat","category","stock_quantity","parseInt","images","Array","isArray","updateProduct","deleteProduct","_errorData$message","code","uploadFile","file","FormData","url","startsWith","apiService"],"sources":["C:/Users/Mowafy/Desktop/Hand_Made/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8000/api';\r\n\r\n// Token management\r\nconst getToken = () => localStorage.getItem('authToken');\r\nconst setToken = (token) => localStorage.setItem('authToken', token);\r\nconst removeToken = () => localStorage.removeItem('authToken');\r\n\r\n// API request helper\r\nconst apiRequest = async (endpoint, options = {}) => {\r\n  const token = getToken();\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...(token && { 'Authorization': `Bearer ${token}` }),\r\n      ...options.headers,\r\n    },\r\n    ...options,\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, config);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('API request failed:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Product API\r\nconst getProducts = async () => {\r\n  return apiRequest('/products');\r\n};\r\n\r\nconst getProduct = async (id) => {\r\n  return apiRequest(`/products/${id}`);\r\n};\r\n\r\n// Order API\r\n// Order API with enhanced error handling\r\nconst createOrder = async (orderData) => {\r\n  try {\r\n    console.log('بدء إرسال الطلب:', orderData);\r\n    \r\n    // التحقق من بيانات الطلب قبل الإرسال\r\n    if (!orderData.customer_info || !orderData.items || orderData.items.length === 0) {\r\n      throw new Error('بيانات الطلب غير مكتملة');\r\n    }\r\n    \r\n    const response = await fetch(`${API_BASE_URL}/orders`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(orderData),\r\n    });\r\n    \r\n    console.log('حالة الاستجابة:', response.status);\r\n    \r\n    // معالجة الأخطاء حسب نوع الاستجابة\r\n    if (!response.ok) {\r\n      let errorMessage = 'حدث خطأ أثناء إرسال الطلب';\r\n      \r\n      try {\r\n        const errorData = await response.json();\r\n        console.log('بيانات الخطأ:', errorData);\r\n        \r\n        if (errorData.message) {\r\n          errorMessage = errorData.message;\r\n        } else if (errorData.detail) {\r\n          errorMessage = errorData.detail;\r\n        }\r\n      } catch (jsonError) {\r\n        console.log('فشل في قراءة بيانات الخطأ');\r\n      }\r\n      \r\n      // رسائل خطأ حسب نوع المشكلة\r\n      if (response.status === 400) {\r\n        throw new Error(errorMessage || 'بيانات الطلب غير صحيحة');\r\n      } else if (response.status === 422) {\r\n        throw new Error(errorMessage || 'بيانات غير مقبولة من السيرفر');\r\n      } else if (response.status === 500) {\r\n        throw new Error('خطأ في السيرفر. حاول مرة أخرى لاحقاً');\r\n      } else if (response.status >= 500) {\r\n        throw new Error('مشكلة في السيرفر. حاول مرة أخرى');\r\n      } else {\r\n        throw new Error(errorMessage || `خطأ ${response.status}`);\r\n      }\r\n    }\r\n    \r\n    // محاولة قراءة الاستجابة\r\n    let responseData;\r\n    try {\r\n      responseData = await response.json();\r\n      console.log('بيانات الاستجابة:', responseData);\r\n    } catch (jsonError) {\r\n      console.log('فشل في قراءة الاستجابة كـ JSON');\r\n      throw new Error('استجابة غير صالحة من السيرفر');\r\n    }\r\n    \r\n    // التحقق من صحة الاستجابة\r\n    if (!responseData) {\r\n      throw new Error('لم يتم الحصول على بيانات من السيرفر');\r\n    }\r\n    \r\n    // التحقق من علامة النجاح الصريحة\r\n    if (responseData.success === false) {\r\n      throw new Error(responseData.message || 'تم رفض الطلب من قبل السيرفر');\r\n    }\r\n    \r\n    // التحقق من وجود ID الطلب (علامة على النجاح)\r\n    if (!responseData.id && responseData.success !== true) {\r\n      console.warn('تحذير: الاستجابة لا تحتوي على ID أو تأكيد صريح للنجاح');\r\n    }\r\n    \r\n    console.log('تم إنشاء الطلب بنجاح:', responseData);\r\n    return responseData;\r\n    \r\n  } catch (error) {\r\n    console.error('خطأ في createOrder:', error);\r\n    \r\n    // معالجة أخطاء الشبكة\r\n    if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n      throw new Error('فشل الاتصال بالسيرفر - تحقق من الإنترنت');\r\n    }\r\n    \r\n    if (error.message.includes('NetworkError') || error.message.includes('Failed to fetch')) {\r\n      throw new Error('مشكلة في الاتصال بالسيرفر');\r\n    }\r\n    \r\n    // إذا كان الخطأ له رسالة واضحة، استخدمها\r\n    if (error.message) {\r\n      throw error;\r\n    }\r\n    \r\n    // خطأ عام\r\n    throw new Error('حدث خطأ غير متوقع أثناء إرسال الطلب');\r\n  }\r\n};\r\n\r\nconst getOrders = async () => {\r\n  return apiRequest('/orders');\r\n};\r\n\r\n// الحل الشامل: تجربة مسارات متعددة\r\nconst updateOrderStatus = async (orderId, status) => {\r\n  console.log(`Updating order ${orderId} with status: ${status}`);\r\n  \r\n  const payload = { status: status };\r\n  console.log('Payload:', JSON.stringify(payload));\r\n  \r\n  // قائمة المسارات المحتملة حسب الأولوية\r\n  const endpoints = [\r\n    `/admin/orders/${orderId}/status`,  // المسار الصحيح في الـ Backend\r\n    `/orders/${orderId}/status`,       // المسار المستخدم في الـ Frontend سابقاً\r\n    `/admin/orders/${orderId}`,        // بديل محتمل\r\n    `/orders/${orderId}`               // بديل محتمل\r\n  ];\r\n  \r\n  // تجربة كل مسار حتى ينجح واحد\r\n  for (const endpoint of endpoints) {\r\n    try {\r\n      console.log(`Trying endpoint: ${endpoint}`);\r\n      const response = await apiRequest(endpoint, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(payload),\r\n      });\r\n      console.log(`Success with endpoint: ${endpoint}`, response);\r\n      return response;\r\n    } catch (error) {\r\n      console.log(`Failed with endpoint ${endpoint}:`, error.message);\r\n      \r\n      // إذا كان هذا آخر محاولة، ارمي الخطأ\r\n      if (endpoint === endpoints[endpoints.length - 1]) {\r\n        throw new Error(`All update attempts failed. Last error: ${error.message}`);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// الحل الثاني: استخدام PATCH بدلاً من PUT\r\nconst updateOrderStatusPatch = async (orderId, status) => {\r\n  return apiRequest(`/orders/${orderId}`, {\r\n    method: 'PATCH',\r\n    body: JSON.stringify({ status }),\r\n  });\r\n};\r\n\r\n// Auth API\r\nconst login = async (credentials) => {\r\n  // Create FormData to match OAuth2PasswordRequestForm expected by FastAPI\r\n  const formData = new URLSearchParams();\r\n  formData.append('username', credentials.email); // FastAPI OAuth2 expects 'username'\r\n  formData.append('password', credentials.password);\r\n  \r\n  const response = await fetch(`${API_BASE_URL}/auth/login`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    },\r\n    body: formData,\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    throw new Error(`HTTP error! status: ${response.status}`);\r\n  }\r\n  \r\n  const data = await response.json();\r\n  \r\n  if (data.access_token) {\r\n    setToken(data.access_token);\r\n  }\r\n  \r\n  return data;\r\n};\r\n\r\nconst logout = () => {\r\n  removeToken();\r\n};\r\n\r\n// Admin API - Updated for images field only\r\nconst createProduct = async (productData) => {\r\n  // Clean data - use only images field\r\n  const preparedData = {\r\n    name: productData.name,\r\n    description: productData.description,\r\n    price: parseFloat(productData.price),\r\n    category: productData.category,\r\n    stock_quantity: parseInt(productData.stock_quantity),\r\n    images: Array.isArray(productData.images) ? productData.images : []\r\n  };\r\n\r\n  console.log('Sending product data:', preparedData);\r\n\r\n  return apiRequest('/admin/products', {\r\n    method: 'POST',\r\n    body: JSON.stringify(preparedData),\r\n  });\r\n};\r\n\r\nconst updateProduct = async (id, productData) => {\r\n  // Clean data - use only images field\r\n  const preparedData = {\r\n    name: productData.name,\r\n    description: productData.description,\r\n    price: parseFloat(productData.price),\r\n    category: productData.category,\r\n    stock_quantity: parseInt(productData.stock_quantity),\r\n    images: Array.isArray(productData.images) ? productData.images : []\r\n  };\r\n\r\n  return apiRequest(`/admin/products/${id}`, {\r\n    method: 'PUT',\r\n    body: JSON.stringify(preparedData),\r\n  });\r\n};\r\n\r\nconst deleteProduct = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/admin/products/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Authorization': `Bearer ${getToken()}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      \r\n      // إذا كان الخطأ بسبب قيود المفتاح الخارجي\r\n      if (errorData.code === '23503' || errorData.message?.includes('foreign key constraint')) {\r\n        throw new Error('Cannot delete product. It is associated with existing orders.');\r\n      }\r\n      \r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error deleting product:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst uploadFile = async (file) => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n  \r\n  const token = getToken();\r\n  const response = await fetch(`${API_BASE_URL}/upload-simple`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`,\r\n    },\r\n    body: formData,\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    throw new Error(`HTTP error! status: ${response.status}`);\r\n  }\r\n  \r\n  const data = await response.json();\r\n  // Prefer absolute url if provided, else fallback to relative\r\n  if (data && data.url && !data.url.startsWith('http')) {\r\n    data.url = `http://localhost:8000${data.url}`;\r\n  }\r\n  return data;\r\n};\r\n\r\n// Export API service\r\nexport const apiService = {\r\n  // Products\r\n  getProducts,\r\n  getProduct,\r\n  \r\n  // Orders\r\n  createOrder,\r\n  getOrders,\r\n  updateOrderStatus,\r\n  updateOrderStatusPatch, // بديل للتجربة\r\n  \r\n  // Auth\r\n  login,\r\n  logout,\r\n  \r\n  // Admin\r\n  createProduct,\r\n  updateProduct,\r\n  deleteProduct,\r\n  uploadFile,\r\n  \r\n  // Utils\r\n  getToken,\r\n  setToken,\r\n  removeToken,\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}